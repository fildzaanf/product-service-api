// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: internal/product/adapter/client/pb/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCommandService_RegisterUser_FullMethodName = "/product.UserCommandService/RegisterUser"
	UserCommandService_LoginUser_FullMethodName    = "/product.UserCommandService/LoginUser"
)

// UserCommandServiceClient is the client API for UserCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCommandServiceClient interface {
	RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	LoginUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
}

type userCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCommandServiceClient(cc grpc.ClientConnInterface) UserCommandServiceClient {
	return &userCommandServiceClient{cc}
}

func (c *userCommandServiceClient) RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, UserCommandService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) LoginUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserCommandService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCommandServiceServer is the server API for UserCommandService service.
// All implementations must embed UnimplementedUserCommandServiceServer
// for forward compatibility.
type UserCommandServiceServer interface {
	RegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	LoginUser(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	mustEmbedUnimplementedUserCommandServiceServer()
}

// UnimplementedUserCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCommandServiceServer struct{}

func (UnimplementedUserCommandServiceServer) RegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserCommandServiceServer) LoginUser(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserCommandServiceServer) mustEmbedUnimplementedUserCommandServiceServer() {}
func (UnimplementedUserCommandServiceServer) testEmbeddedByValue()                            {}

// UnsafeUserCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCommandServiceServer will
// result in compilation errors.
type UnsafeUserCommandServiceServer interface {
	mustEmbedUnimplementedUserCommandServiceServer()
}

func RegisterUserCommandServiceServer(s grpc.ServiceRegistrar, srv UserCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCommandService_ServiceDesc, srv)
}

func _UserCommandService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).RegisterUser(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).LoginUser(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCommandService_ServiceDesc is the grpc.ServiceDesc for UserCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.UserCommandService",
	HandlerType: (*UserCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserCommandService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserCommandService_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/product/adapter/client/pb/user.proto",
}

const (
	UserQueryService_GetUserByID_FullMethodName = "/product.UserQueryService/GetUserByID"
)

// UserQueryServiceClient is the client API for UserQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserQueryServiceClient interface {
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserQueryServiceClient(cc grpc.ClientConnInterface) UserQueryServiceClient {
	return &userQueryServiceClient{cc}
}

func (c *userQueryServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserQueryService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQueryServiceServer is the server API for UserQueryService service.
// All implementations must embed UnimplementedUserQueryServiceServer
// for forward compatibility.
type UserQueryServiceServer interface {
	GetUserByID(context.Context, *GetUserByIDRequest) (*UserResponse, error)
	mustEmbedUnimplementedUserQueryServiceServer()
}

// UnimplementedUserQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserQueryServiceServer struct{}

func (UnimplementedUserQueryServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserQueryServiceServer) mustEmbedUnimplementedUserQueryServiceServer() {}
func (UnimplementedUserQueryServiceServer) testEmbeddedByValue()                          {}

// UnsafeUserQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserQueryServiceServer will
// result in compilation errors.
type UnsafeUserQueryServiceServer interface {
	mustEmbedUnimplementedUserQueryServiceServer()
}

func RegisterUserQueryServiceServer(s grpc.ServiceRegistrar, srv UserQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserQueryService_ServiceDesc, srv)
}

func _UserQueryService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserQueryService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserQueryService_ServiceDesc is the grpc.ServiceDesc for UserQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.UserQueryService",
	HandlerType: (*UserQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UserQueryService_GetUserByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/product/adapter/client/pb/user.proto",
}
